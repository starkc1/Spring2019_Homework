


ARM Macro Assembler    Page 1 


    1 00000000                 AREA             my_fancy_asm_code, CODE, READON
LY 
                                                            ; Define the progra
                                                            m area
    2 00000000         
    3 00000000         ; Export functions defined in this file. These functions
                        need to be declared 
    4 00000000         ; in the file calling them.
    5 00000000                 EXPORT           task10
    6 00000000                 EXPORT           task11
    7 00000000                 EXPORT           task12
    8 00000000                 EXPORT           task13
    9 00000000                 EXPORT           task14
   10 00000000                 EXPORT           task15
   11 00000000         
   12 00000000                 IMPORT           gPtrArray10a
   13 00000000                 IMPORT           gPtrArray11a
   14 00000000                 IMPORT           gPtrArray12a
   15 00000000                 IMPORT           gPtrArray13a
   16 00000000                 IMPORT           gPtrArray14a
   17 00000000                 IMPORT           gPtrArray15a
   18 00000000                 IMPORT           gVar1
   19 00000000         
   20 00000000                 ALIGN                        ; Align the data in
                                                             the boundary of 4 
                                                            bytes. 
   21 00000000         
   22 00000000         task10  PROC
   23 00000000 4823            LDR              r0, =gPtrArray10a ; Loading the
                                                             address of the glo
                                                            bal variable gPtrAr
                                                            ray10a
   24 00000002 6800            LDR              r0, [r0]    ; Loading the conte
                                                            nt of the global va
                                                            riable gPtrArray10a
                                                            
   25 00000004 4923            LDR              r1, =gVar1  ; Loading the addre
                                                            ss of the global va
                                                            riable gVar1
   26 00000006 6809            LDR              r1, [r1]    ; Loading the conte
                                                            nt of the global va
                                                            riable gVar1
   27 00000008 F04F 0200       MOV              r2, #0      ; variable (int) i
   28 0000000C         task10_loop
   29 0000000C 428A            CMP              r2, r1      ; test = r2 - r1
   30 0000000E DA07            BGE              task10_end  ; if test >= 0, the
                                                            n branch to task10_
                                                            end    
   31 00000010 EA4F 1302       MOV              r3, r2, LSL #4 ; r3 <- r2 * 4
   32 00000014 F1A3 030F       SUB              r3, #15     ; r3 <- r3 - 15
   33 00000018 5483            STRB             r3, [r0, r2] ; r3 -> mem[r0 + r
                                                            2] or r3 -> mem[r0 
                                                            + i]
   34 0000001A F102 0201       ADD              r2, #1      ; r2 <- r2 + 1
   35 0000001E E7F5            B                task10_loop ; branch to task10_
                                                            loop
   36 00000020         task10_end
   37 00000020 4770            BX               lr          ; return
   38 00000022                 ENDP



ARM Macro Assembler    Page 2 


   39 00000022         
   40 00000022         ; If you need to use registers starting from r4, you nee
                       d to PUSH them first to save the 
   41 00000022         ; run-time environment for the caller. You need to POP t
                       hem up at the exit of the code.
   42 00000022         
   43 00000022         task11  PROC
   44 00000022 4770            BX               lr
   45 00000024                 ENDP
   46 00000024         
   47 00000024         task12  PROC
   48 00000024 B530            PUSH             {r4-r5, lr}
   49 00000026 481A            LDR              r0, =gPtrArray10a
   50 00000028 6800            LDR              r0, [r0]
   51 0000002A 4C1B            LDR              r4, =gPtrArray12a
   52 0000002C 6824            LDR              r4, [r4]
   53 0000002E 4919            LDR              r1, =gVar1
   54 00000030 6809            LDR              r1, [r1]
   55 00000032 F04F 0200       MOV              r2, #0
   56 00000036         task12_loop
   57 00000036 428A            CMP              r2, r1
   58 00000038 DA0C            BGE              task12_end
   59 0000003A 5683            LDRSB            r3, [r0, r2]
   60 0000003C F04F 050A       LDR              r5, =10
   61 00000040 EBA5 0503       SUB              r5, r3
   62 00000044 F824 5012       STRH             r5, [r4, r2, LSL #1]
   63 00000048 F103 0301       ADD              r3, #1
   64 0000004C 5483            STRB             r3, [r0, r2]
   65 0000004E F102 0201       ADD              r2, #1
   66 00000052 E7F0            B                task12_loop
   67 00000054         task12_end
   68 00000054 BD30            POP              {r4-r5, pc} ; Pop lr to pc, whi
                                                            ch is the same as B
                                                            X lr.
   69 00000056                 ENDP
   70 00000056         
   71 00000056         task13  PROC
   72 00000056 B530            PUSH             {r4-r5, lr}
   73 00000058 BD30            POP              {r4-r5, pc}
   74 0000005A                 ENDP
   75 0000005A         
   76 0000005A         task14  PROC
   77 0000005A B530            PUSH             {r4-r5, lr}
   78 0000005C 480E            LDR              r0, =gPtrArray12a
   79 0000005E 6800            LDR              r0, [r0]
   80 00000060 4C0E            LDR              r4, =gPtrArray14a
   81 00000062 6824            LDR              r4, [r4]
   82 00000064 490B            LDR              r1, =gVar1
   83 00000066 6809            LDR              r1, [r1]
   84 00000068 F1A1 0101       SUB              r1, #1
   85 0000006C F04F 0200       MOV              r2, #0
   86 00000070         task14_loop
   87 00000070 428A            CMP              r2, r1
   88 00000072 DA0A            BGE              task14_end
   89 00000074 F9B0 3000       LDRSH            r3, [r0]
   90 00000078 F930 5F02       LDRSH            r5, [r0, #2]!
   91 0000007C EB03 03C5       ADD              r3, r5, LSL #3
   92 00000080 F844 3022       STR              r3, [r4, r2, LSL #2]
   93 00000084 F102 0201       ADD              r2, #1



ARM Macro Assembler    Page 3 


   94 00000088 E7F2            B                task14_loop
   95 0000008A         task14_end
   96 0000008A BD30            POP              {r4-r5, pc}
   97 0000008C                 ENDP
   98 0000008C         
   99 0000008C         task15  PROC
  100 0000008C B530            PUSH             {r4-r5, lr}
  101 0000008E BD30            POP              {r4-r5, pc}
  102 00000090                 ENDP
  103 00000090         
  104 00000090                 END
              00000000 
              00000000 
              00000000 
              00000000 
Command Line: --debug --xref --diag_suppress=9931 --cpu=Cortex-M4.fp --apcs=int
erwork --depend=.\objects\asm_functions.d -o.\objects\asm_functions.o -I.\RTE\_
Target_sim -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\5.4.0\CMSIS\Core\Include -IC:\Keil_v
5\ARM\PACK\ARM\CMSIS\5.4.0\Device\ARM\ARMCM4\Include --predefine="__EVAL SETA 1
" --predefine="__UVISION_VERSION SETA 526" --predefine="_RTE_ SETA 1" --predefi
ne="ARMCM4_FP SETA 1" --list=.\listings\asm_functions.lst source\asm_functions.
s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

my_fancy_asm_code 00000000

Symbol: my_fancy_asm_code
   Definitions
      At line 1 in file source\asm_functions.s
   Uses
      None
Comment: my_fancy_asm_code unused
task10 00000000

Symbol: task10
   Definitions
      At line 22 in file source\asm_functions.s
   Uses
      At line 5 in file source\asm_functions.s
Comment: task10 used once
task10_end 00000020

Symbol: task10_end
   Definitions
      At line 36 in file source\asm_functions.s
   Uses
      At line 30 in file source\asm_functions.s
Comment: task10_end used once
task10_loop 0000000C

Symbol: task10_loop
   Definitions
      At line 28 in file source\asm_functions.s
   Uses
      At line 35 in file source\asm_functions.s
Comment: task10_loop used once
task11 00000022

Symbol: task11
   Definitions
      At line 43 in file source\asm_functions.s
   Uses
      At line 6 in file source\asm_functions.s
Comment: task11 used once
task12 00000024

Symbol: task12
   Definitions
      At line 47 in file source\asm_functions.s
   Uses
      At line 7 in file source\asm_functions.s
Comment: task12 used once
task12_end 00000054

Symbol: task12_end
   Definitions
      At line 67 in file source\asm_functions.s
   Uses
      At line 58 in file source\asm_functions.s
Comment: task12_end used once
task12_loop 00000036

Symbol: task12_loop



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

   Definitions
      At line 56 in file source\asm_functions.s
   Uses
      At line 66 in file source\asm_functions.s
Comment: task12_loop used once
task13 00000056

Symbol: task13
   Definitions
      At line 71 in file source\asm_functions.s
   Uses
      At line 8 in file source\asm_functions.s
Comment: task13 used once
task14 0000005A

Symbol: task14
   Definitions
      At line 76 in file source\asm_functions.s
   Uses
      At line 9 in file source\asm_functions.s
Comment: task14 used once
task14_end 0000008A

Symbol: task14_end
   Definitions
      At line 95 in file source\asm_functions.s
   Uses
      At line 88 in file source\asm_functions.s
Comment: task14_end used once
task14_loop 00000070

Symbol: task14_loop
   Definitions
      At line 86 in file source\asm_functions.s
   Uses
      At line 94 in file source\asm_functions.s
Comment: task14_loop used once
task15 0000008C

Symbol: task15
   Definitions
      At line 99 in file source\asm_functions.s
   Uses
      At line 10 in file source\asm_functions.s
Comment: task15 used once
13 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

gPtrArray10a 00000000

Symbol: gPtrArray10a
   Definitions
      At line 12 in file source\asm_functions.s
   Uses
      At line 23 in file source\asm_functions.s
      At line 49 in file source\asm_functions.s

gPtrArray11a 00000000

Symbol: gPtrArray11a
   Definitions
      At line 13 in file source\asm_functions.s
   Uses
      None
Comment: gPtrArray11a unused
gPtrArray12a 00000000

Symbol: gPtrArray12a
   Definitions
      At line 14 in file source\asm_functions.s
   Uses
      At line 51 in file source\asm_functions.s
      At line 78 in file source\asm_functions.s

gPtrArray13a 00000000

Symbol: gPtrArray13a
   Definitions
      At line 15 in file source\asm_functions.s
   Uses
      None
Comment: gPtrArray13a unused
gPtrArray14a 00000000

Symbol: gPtrArray14a
   Definitions
      At line 16 in file source\asm_functions.s
   Uses
      At line 80 in file source\asm_functions.s
Comment: gPtrArray14a used once
gPtrArray15a 00000000

Symbol: gPtrArray15a
   Definitions
      At line 17 in file source\asm_functions.s
   Uses
      None
Comment: gPtrArray15a unused
gVar1 00000000

Symbol: gVar1
   Definitions
      At line 18 in file source\asm_functions.s
   Uses
      At line 25 in file source\asm_functions.s
      At line 53 in file source\asm_functions.s
      At line 82 in file source\asm_functions.s



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
External symbols


7 symbols
357 symbols in table
